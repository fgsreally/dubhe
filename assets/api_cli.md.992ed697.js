import{_ as s,o as l,c as a,a as e}from"./app.c7558d4a.js";const A=JSON.parse('{"title":"命令行工具","description":"","frontmatter":{},"headers":[],"relativePath":"api/cli.md","lastUpdated":1692797287000}'),n={name:"api/cli.md"},o=e(`<h1 id="命令行工具" tabindex="-1">命令行工具 <a class="header-anchor" href="#命令行工具" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>请将消费端配置（以下命令主要在消费端中使用）写到工作目录下的<code>dubhe.config.ts/js/mjs</code></p></div><ol><li>比较本地缓存和远程模块的版本</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">detect</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>引入对应<code>project/module</code>的源码 例如 <code>vite-pub/test</code></li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">projec</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>删除指定项目的缓存</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">delete</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">projec</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><ol start="4"><li>安装缓存</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span>
<span class="line"></span></code></pre></div><ol start="5"><li>构建共有依赖（在生产消费两端均完成后执行，这可以实现函数级别的treeshake，以vue为例，两端用到了多少，就打包多少）</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">bundle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">dependenc</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ol start="6"><li>分析远程模块的依赖情况</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">analyse</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><ol start="7"><li>清除所有缓存</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clear</span></span>
<span class="line"></span></code></pre></div><ol start="8"><li>获得全局的缓存与类型缓存的位置</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">root</span></span>
<span class="line"></span></code></pre></div><ol start="9"><li>将类型缓存link到开发目录下</li></ol><blockquote><p>一般而言，以一个<code>vite</code>空白项目为例，启动服务会尝试：寻找缓存-&gt;拉取缓存-&gt;缓存的类型link到本地目录，相当于<code>install</code>-&gt;<code>link</code>, 如果中间出现问题导致中断，开发者可以自行使用这两个命令进行调试</p></blockquote><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">link</span></span>
<span class="line"></span></code></pre></div><ol start="10"><li>把对应目录下的构建文件(esm)，转成<code>systemjs</code></li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">transform</span></span>
<span class="line"></span></code></pre></div><ol start="11"><li>获得远程项目暴露的方法</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">projec</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ol start="11"><li>开发时的类型共享(实验性)</li></ol><blockquote><p>本质就是开发时，使用<code>watch</code>模式产生类型文件，然后再同步到消费端 我不知道是不是我电脑or配置的原因，<code>watch</code>模式在持续一段时间后一定会莫名报错，暂时无法处理，故为实验性</p></blockquote><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">dubhe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dts</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">projec</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div>`,28),p=[o];function t(c,i,r,d,C,y){return l(),a("div",null,p)}const D=s(n,[["render",t]]);export{A as __pageData,D as default};
