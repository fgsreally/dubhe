import{_ as s,o as a,c as n,a as l}from"./app.b9f18b82.js";const f=JSON.parse('{"title":"垫片","description":"","frontmatter":{},"headers":[{"level":2,"title":"冷模式","slug":"冷模式","link":"#冷模式","children":[]},{"level":2,"title":"热模式","slug":"热模式","link":"#热模式","children":[]}],"relativePath":"advance/polyfill.md","lastUpdated":1703935270000}'),e={name:"advance/polyfill.md"},o=l(`<h1 id="垫片" tabindex="-1">垫片 <a class="header-anchor" href="#垫片" aria-hidden="true">#</a></h1><p>如果希望在非 esm 下工作，需要降级为<code>systemjs</code>，具体步骤如下：</p><h2 id="冷模式" tabindex="-1">冷模式 <a class="header-anchor" href="#冷模式" aria-hidden="true">#</a></h2><p>如果消费端是冷模式，那么不需要做任何的工作，只需要引入<code>vite</code>官方的<code>@vitejs/plugin-legacy</code>，</p><blockquote><p><code>webpack</code>等类似</p></blockquote><h2 id="热模式" tabindex="-1">热模式 <a class="header-anchor" href="#热模式" aria-hidden="true">#</a></h2><p>如果消费端是热模式，那需要两步</p><ol><li>在生产端，使用<a href="./../api/cli.html">dubhe transform</a>生成<code>sysmtemjs</code>格式</li><li>在消费端, 可以在配置项中注入垫片。</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">polyfill</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * string|boolean</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#BABED8;">    systemjs</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// systemjs的垫片，cdn形式，vite可不用</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * string|boolean</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#BABED8;">    importMap</span><span style="color:#676E95;font-style:italic;">// importmap的垫片，cdn形式</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><blockquote><p><code>importmap</code>其实没有那么理想，比如一旦创建以后，无法更改且全局唯一，反而<code>systemjs</code>能提供灵活的动态能力，也许只使用<code>systemjs</code>是一个不差的方式</p></blockquote>`,10),t=[o];function p(c,i,r,d,y,h){return a(),n("div",null,t)}const _=s(e,[["render",p]]);export{f as __pageData,_ as default};
