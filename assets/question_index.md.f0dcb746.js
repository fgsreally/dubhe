import{_ as e,o as d,c,a as o}from"./app.c7558d4a.js";const v=JSON.parse('{"title":"常见问题","description":"","frontmatter":{},"headers":[{"level":2,"title":"关于类型","slug":"关于类型","link":"#关于类型","children":[]},{"level":2,"title":"关于缓存","slug":"关于缓存","link":"#关于缓存","children":[]},{"level":2,"title":"esbuild","slug":"esbuild","link":"#esbuild","children":[]},{"level":2,"title":"webpack","slug":"webpack","link":"#webpack","children":[]},{"level":2,"title":"vite","slug":"vite","link":"#vite","children":[]},{"level":2,"title":"动态控制","slug":"动态控制","link":"#动态控制","children":[]},{"level":2,"title":"hash","slug":"hash","link":"#hash","children":[]}],"relativePath":"question/index.md","lastUpdated":1692708491000}'),i={name:"question/index.md"},a=o('<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-hidden="true">#</a></h1><h2 id="关于类型" tabindex="-1">关于类型 <a class="header-anchor" href="#关于类型" aria-hidden="true">#</a></h2><p>当</p><ol><li>配置中<code>types</code>这一项为true运行时，</li><li>直接用<code>cli</code>进行<code>dubhe link</code>时</li></ol><p>出现错误：<code>[dubhe]:fail to create symlink</code>，这是因为<code>dubhe</code>会下载类型文件并缓存在本地，但此时并不会在工作目录下，需要通过创建软链接的方式把下载的类型文件关联到当前的工作文件夹中，在<code>windows</code>下一定需要管理员权限，换成管理员权限运行即可，只需要第一次这样，后续启动时发现工作目录下已有内存，就直接跳过</p><p>此时在根目录下会创建<code>tsconfig.dubhe.json</code>，请将其与<code>tsconfig</code>关联</p><blockquote><p>我也认为这很麻烦，但没有找到更好的方法，<code>pnpm</code>创建软链接似乎不需要管理员权限，不太清楚是怎么做到的,<code>chatgpt</code>也不肯告诉我。</p></blockquote><h2 id="关于缓存" tabindex="-1">关于缓存 <a class="header-anchor" href="#关于缓存" aria-hidden="true">#</a></h2><p><code>vite</code>中不使用缓存时，性能会有点糟糕。在缓存模式下，如果出现某种问题，可尝试使用非缓存，如果非缓存时一切正常，那么问题来自缓存，将缓存删掉重启服务即可,详见<a href="./../api/cli.html"><code>命令行操作</code></a></p><h2 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-hidden="true">#</a></h2><ol><li>由于<code>esbuild</code>没有<code>transform hook</code>,暂时只能使用<code>esbuild-plugin-merge</code>模拟，但<code>esbuild</code>的<code>watch</code>模式在<code>0.17</code>的版本大改，所以<code>dubhe</code>暂时只能在<code>0.17</code>以前的版本起效，详见<a href="https://github.com/fgsreally/dubhe/tree/main/examples/esbuild-pub" target="_blank" rel="noreferrer">example</a></li><li><code>esbuild</code>暂时没有消费端能力，原因与前一个有关，做出来也是要用这种不太好的方式，暂时需要观察一下</li></ol><h2 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-hidden="true">#</a></h2><ol><li><code>webpack</code>不会添加生产端能力，这是架构问题，没有办法。但可以使用<code>vite</code>/<code>esbuild</code>对<code>webpack</code>项目进行生产端操作，毕竟都是<code>import</code>的模块写法</li><li><code>webpack</code>如果使用了多进程打包，那么必须使用缓存，因为不使用缓存时，<code>dubhe</code>使用的是<code>webpack-virtual-module</code>，这在多进程中无法起效</li></ol><h2 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-hidden="true">#</a></h2><ol><li>如果生产端和消费端都是<code>vite</code>，并都使用开发模式，有类似错误：<code>[vite] Internal server error: ENOENT: no such file or directory, open xxx</code> 这是因为<code>vite</code>依赖预构建尚未完成，<code>dubhe</code>找不到依赖，稍等片刻<code>vite</code>会自动重试并成功运行</li></ol><blockquote><p>我曾在某版本尝试使用<code>importmap</code>来解决这个问题，使<code>vite</code>不解析共有依赖，直接通过<code>importmap</code>获取，从而跳过<code>devserver</code>的报错，但<code>vite</code>实在尽职尽责，面对依赖必解析，我试了各种各样的方法尝试绕过，最后搞得灰头土脸，对此我不予置评</p></blockquote><ol start="2"><li><p>如果生产消费端都是<code>vite</code>，并都使用开发模式，热更新出现内存溢出，这是因为<code>vite</code>的热更新逻辑是相对于根路径的，比如项目路径为<code>D:\\dubhe</code>，热更新的路径为<code>D:\\dubhe\\src\\App.vue</code>,那么<code>vite</code>认为存在热更新的路径即<code>src/App.vue</code>，当生产消费两端，有同相对路径的文件，就出现问题，比如，双端都有<code>src/App.vue</code>文件，那么热更新时，就会反复触发<code>vue</code>对应的热更新逻辑知道内存溢出。解决：更换文件名</p></li><li><p>当生产端是<code>vite</code>,base默认为<code>/_dubhe/</code>,如果要添加<code>base</code>，请添加一个特定字符串。由于vite 没有publicpath ，暂时采用社区插件<code>vite-plugin-dynamic-base</code>，故base不能为空，从而使得消费端能够正确处理<code>assets</code>，比如图片等，</p></li></ol><h2 id="动态控制" tabindex="-1">动态控制 <a class="header-anchor" href="#动态控制" aria-hidden="true">#</a></h2><h2 id="hash" tabindex="-1">hash <a class="header-anchor" href="#hash" aria-hidden="true">#</a></h2><p>已解决</p>',20),l=[a];function t(r,h,s,n,p,u){return d(),c("div",null,l)}const _=e(i,[["render",t]]);export{v as __pageData,_ as default};
